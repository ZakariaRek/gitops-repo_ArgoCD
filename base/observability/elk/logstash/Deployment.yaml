apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: observability
  labels:
    app: logstash
    component: observability
    tier: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
        component: observability
        tier: logging
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:8.11.0
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          ports:
            - containerPort: 5044
              name: beats
            - containerPort: 5000
              name: tcp
            - containerPort: 9600
              name: monitoring
          env:
            - name: LS_JAVA_OPTS
              value: "-Xmx1g -Xms1g"
            - name: XPACK_MONITORING_ENABLED
              value: "false"
            - name: XPACK_MONITORING_ELASTICSEARCH_HOSTS
              value: "http://elasticsearch.observability.svc.cluster.local:9200"
          resources:
            requests:
              memory: "1.5Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          volumeMounts:
            # Mount config to a writable directory
            - name: logstash-config-volume
              mountPath: /usr/share/logstash/config
            - name: logstash-pipeline
              mountPath: /usr/share/logstash/pipeline/logstash.conf
              subPath: logstash.conf
          livenessProbe:
            httpGet:
              path: /
              port: 9600
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 9600
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 9600
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 20
      volumes:
        # Create a writable volume for the config directory
        - name: logstash-config-volume
          emptyDir: {}
        - name: logstash-config-source
          configMap:
            name: logstash-config
        - name: logstash-pipeline
          configMap:
            name: logstash-pipeline
      initContainers:
        # Copy the config from ConfigMap to writable volume
        - name: setup-config
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Copying Logstash configuration..."
              cp /tmp/config-source/* /usr/share/logstash/config/
              # Set proper ownership and permissions for logstash user (uid 1000)
              chown -R 1000:1000 /usr/share/logstash/config/
              chmod -R 644 /usr/share/logstash/config/*
              ls -la /usr/share/logstash/config/
              echo "Configuration setup complete!"
          volumeMounts:
            - name: logstash-config-source
              mountPath: /tmp/config-source
            - name: logstash-config-volume
              mountPath: /usr/share/logstash/config
        - name: wait-for-elasticsearch
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Elasticsearch..."
              until nc -z elasticsearch.observability.svc.cluster.local 9200; do 
                echo "Elasticsearch not ready, waiting..."
                sleep 10
              done
              echo "Elasticsearch is ready!"
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              until nc -z kafka-service.data.svc.cluster.local 9092; do 
                echo "Kafka not ready, waiting..."
                sleep 10
              done
              echo "Kafka is ready!"