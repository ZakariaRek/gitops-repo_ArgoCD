apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: microservices
  labels:
    app: user-service
    component: microservices
data:
  application.yml: |
    server:
      port: 8081
      servlet:
        context-path: /api/users
    
    spring:
      application:
        name: user-service
      profiles:
        active: docker,kafka
      
  
      # MongoDB Configuration - Use environment variables
      data:
        mongodb:
          host: ${SPRING_DATA_MONGODB_HOST:user-mongodb-headless.data.svc.cluster.local}
          port: ${SPRING_DATA_MONGODB_PORT:27017}
          database: ${SPRING_DATA_MONGODB_DATABASE:User-service}
          username: ${SPRING_DATA_MONGODB_USERNAME:userservice}
          password: ${SPRING_DATA_MONGODB_PASSWORD:userservice123}
          uri: ${SPRING_DATA_MONGODB_URI:mongodb://userservice:userservice123@user-mongodb-headless.data.svc.cluster.local:27017/User-service}
          authentication-database: ${SPRING_DATA_MONGODB_AUTH_DATABASE:admin}
      
      # CRITICAL: Kafka Configuration - Force Kubernetes service usage
      kafka:
        bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
        producer:
          bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
          properties:
            spring.json.add.type.headers: false
            acks: all
            retries: 3
            enable.idempotence: true
            max.in.flight.requests.per.connection: 1
        consumer:
          bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
          group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:user-service-group}
          auto-offset-reset: earliest
          enable-auto-commit: false
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    
    # EUREKA CONFIGURATION - Force Kubernetes service usage
    eureka:
      client:
        enabled: ${EUREKA_CLIENT_ENABLED:true}
        serviceUrl:
          defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://eureka-server.infrastructure.svc.cluster.local:8761/eureka}
        register-with-eureka: ${EUREKA_CLIENT_REGISTER_WITH_EUREKA:true}
        fetch-registry: ${EUREKA_CLIENT_FETCH_REGISTRY:true}
        registry-fetch-interval-seconds: 30
        initial-instance-info-replication-interval-seconds: 30
      instance:
        prefer-ip-address: ${EUREKA_INSTANCE_PREFER_IP_ADDRESS:true}
        hostname: ${EUREKA_INSTANCE_HOSTNAME:user-service}
        instance-id: ${spring.application.name}:${HOSTNAME:user-service}:${server.port}
        lease-renewal-interval-in-seconds: 30
        lease-expiration-duration-in-seconds: 90
        status-page-url-path: /api/users/actuator/info
        health-check-url-path: /api/users/actuator/health
        metadata-map:
          management.context-path: /api/users/actuator
          startup: ${random.int}
    
    # MANAGEMENT CONFIGURATION
    management:
      endpoints:
        web:
          exposure:
            include: health,info,env,metrics
          base-path: /actuator
      endpoint:
        health:
          show-details: always
          show-components: always
          probes:
            enabled: true
        env:
          show-values: always
      health:
        livenessstate:
          enabled: true
        readinessstate:
          enabled: true
        mongo:
          enabled: true
        eureka:
          enabled: true
        kafka:
          enabled: true
    
    # LOGGING CONFIGURATION
    logging:
      level:
        com.netflix.eureka: INFO
        com.netflix.discovery: INFO
        org.springframework.cloud.netflix.eureka: INFO
        org.springframework.kafka: INFO
        org.apache.kafka: WARN
        com.Ecommerce.User_Service: DEBUG
        root: INFO
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [user-service] %logger{36} - %msg%n"
    
    # JWT Configuration
    User-service:
      app:
        jwtCookieName: user-service-jwt
        jwtSecret: ${JWT_SECRET:c03a546beee68b92784e681b537540349c386d02b6dbf9917cf438e47e5c1ee93fdebc55652af00cb3ebc6bff17dc3bedaa33ea6cfdd1959b114ede448c4ac87853021cc3c32f1ef6d5951d0c6b1398bc01c563c7638a0000e6b4064c5733c5552aa232aa8547be8b4b1f8dddacac8256f319acd6832ff5ae9365358e20624fc99dab8489d33e582cf621444e9d944442559707a1f92d556862bb53ce12deb3ec17d3a8bc3c7159b672e4f02189af368a8e71d8547a5b71518de7a1d9a4997d20b4f646fae73e73c26666799b21cdec5544b74319756bb0a27d4e124ec5f13bf8f338ce3ba5ad8b3af1a8aae211bef3eb6ca4f8a24e6b80662c94530e168b0dc}
        jwtExpirationMs: ${USER_SERVICE_APP_JWT_EXPIRATION_MS:86400000}