apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-service-config
  namespace: microservices
  labels:
    app: payment-service
    component: microservices
data:
  config.yaml: |
    # Payment Service Configuration
    server:
      port: 8084
      host: "0.0.0.0"
      read_timeout: 30s
      write_timeout: 30s
      idle_timeout: 60s
      shutdown_timeout: 30s
    
    # Service Information
    service:
      name: "payment-service"
      version: "1.0.0"
      environment: "docker"
    
    # Database Configuration (PostgreSQL)
    database:
      host: "postgres-service.data.svc.cluster.local"
      port: 5432
      name: "paymentdb"
      username: "paymentservice"  # Will be overridden by secret
      password: "paymentservice123"  # Will be overridden by secret
      sslmode: "disable"
      max_open_conns: 25
      max_idle_conns: 5
      conn_max_lifetime: "300s"
      conn_max_idle_time: "60s"
    
    # Redis Configuration for caching and rate limiting
    redis:
      host: "redis-service.data.svc.cluster.local"
      port: 6379
      password: ""
      database: 4
      pool_size: 10
      min_idle_conns: 5
      dial_timeout: "5s"
      read_timeout: "3s"
      write_timeout: "3s"
      pool_timeout: "4s"
      idle_timeout: "300s"
    
    # Kafka Configuration
    kafka:
      brokers:
        - "kafka-service.data.svc.cluster.local:9092"
      consumer:
        group_id: "payment-service-group"
        auto_offset_reset: "earliest"
        enable_auto_commit: true
        auto_commit_interval: "1s"
      producer:
        acks: "all"
        retries: 3
        batch_size: 16384
        linger_ms: 5
        buffer_memory: 33554432
      topics:
        payment_request: "payment.request"
        payment_response: "payment.response"
        payment_confirmed: "payment-confirmed"
        payment_failed: "payment-failed"
        payment_refund: "payment-refund"
    
    # Service Discovery (Eureka equivalent for Go)
    discovery:
      enabled: true
      eureka_url: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
      instance_id: "payment-service:8084"
      heartbeat_interval: "30s"
      health_check_url: "/health"
    
    # Payment Provider Configuration
    payment:
      providers:
        stripe:
          enabled: true
          api_version: "2023-10-16"
          webhook_endpoint_secret: ""  # Will be set from secret
        paypal:
          enabled: false
          sandbox: true
        square:
          enabled: false
          sandbox: true
      
      # Payment processing settings
      processing:
        timeout: "30s"
        retry_attempts: 3
        retry_delay: "2s"
        max_amount: 10000.00  # $10,000 max transaction
        min_amount: 0.50      # $0.50 min transaction
        currency: "USD"
      
      # Security settings
      security:
        require_cvv: true
        require_postal_code: true
        fraud_detection: true
        risk_threshold: 75  # Percentage
    
    # Rate Limiting Configuration
    rate_limiting:
      enabled: true
      default:
        requests_per_minute: 60
        requests_per_hour: 1000
      payment_endpoints:
        requests_per_minute: 3      # Very strict for payment operations
        requests_per_5_minutes: 15
        burst_capacity: 5
      admin_endpoints:
        requests_per_minute: 20
        requests_per_hour: 200
    
    # Circuit Breaker Configuration
    circuit_breaker:
      enabled: true
      failure_threshold: 30      # 30% failure rate opens circuit
      success_threshold: 3       # 3 consecutive successes closes circuit
      timeout: "60s"             # Circuit stays open for 60s
      max_requests: 3            # Max requests in half-open state
    
    # Health Check Configuration
    health:
      enabled: true
      endpoint: "/health"
      detailed_endpoint: "/health/detailed"
      check_interval: "30s"
      checks:
        database: true
        redis: true
        kafka: true
        payment_providers: true
    
    # Metrics and Monitoring
    metrics:
      enabled: true
      endpoint: "/metrics"
      prometheus: true
      custom_metrics:
        - "payment_transactions_total"
        - "payment_amount_processed"
        - "payment_failures_total"
        - "payment_processing_duration"
    
    # Logging Configuration
    logging:
      level: "info"              # debug, info, warn, error
      format: "json"             # json, text
      output: "stdout"           # stdout, file
      enable_caller: true
      enable_stacktrace: false
      fields:
        service: "payment-service"
        version: "1.0.0"
    
    # Security Configuration
    security:
      cors:
        enabled: true
        allowed_origins:
          - "http://localhost:3000"
          - "http://localhost:8080"
          - "https://api.nexus-commerce.local"
        allowed_methods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
          - "OPTIONS"
        allowed_headers:
          - "Authorization"
          - "Content-Type"
          - "X-Requested-With"
        allow_credentials: true
      
      jwt:
        enabled: true
        secret: ""  # Will be set from secret
        expiration: "24h"
        issuer: "nexus-commerce"
      
      encryption:
        key: ""  # Will be set from secret
        algorithm: "AES-256-GCM"
    
    # Feature Flags
    features:
      recurring_payments: true
      refunds: true
      partial_refunds: true
      multi_currency: false
      saved_payment_methods: true
      webhooks: true
      audit_logging: true
    
    # Webhook Configuration
    webhooks:
      enabled: true
      endpoints:
        stripe: "/webhooks/stripe"
        paypal: "/webhooks/paypal"
      signature_validation: true
      retry_attempts: 3
      timeout: "10s"
  
  # Environment-specific overrides
  .env: |
    # Go specific environment variables
    GOOS=linux
    GOARCH=amd64
    CGO_ENABLED=0
    
    # Service configuration
    PORT=8084
    GIN_MODE=release
    
    # Database
    DB_HOST=postgres-service.data.svc.cluster.local
    DB_PORT=5432
    DB_NAME=paymentdb
    
    # Redis
    REDIS_HOST=redis-service.data.svc.cluster.local
    REDIS_PORT=6379
    REDIS_DB=4
    
    # Kafka
    KAFKA_BROKERS=kafka-service.data.svc.cluster.local:9092
    
    # Monitoring
    ENABLE_METRICS=true
    ENABLE_HEALTH_CHECK=true
    
    # Security
    ENABLE_CORS=true
    ENABLE_JWT=true