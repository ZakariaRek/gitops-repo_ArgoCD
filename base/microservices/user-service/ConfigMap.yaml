apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: microservices
  labels:
    app: user-service
    component: microservices
data:
  application.yml: |
    server:
      port: 8081
      servlet:
        context-path: /api/users
      error:
        include-stacktrace: always
        include-message: always
        include-binding-errors: always
    
    debug: true
    
    spring:
      profiles:
        active: docker,kafka
      config:
        import: optional:configserver:${SPRING_CLOUD_CONFIG_URI:http://config-server.infrastructure.svc.cluster.local:8888}
      application:
        name: user-service
      
      # MongoDB Configuration
      data:
        mongodb:
          host: ${SPRING_DATA_MONGODB_HOST:user-mongodb-headless.data.svc.cluster.local}
          port: ${SPRING_DATA_MONGODB_PORT:27017}
          database: ${SPRING_DATA_MONGODB_DATABASE:User-service}
          username: ${SPRING_DATA_MONGODB_USERNAME:userservice}
          password: ${SPRING_DATA_MONGODB_PASSWORD:userservice123}
          uri: ${SPRING_DATA_MONGODB_URI:mongodb://userservice:userservice123@user-mongodb-headless.data.svc.cluster.local:27017/User-service}
      
      # Kafka Configuration - Same pattern as Cart Service
      kafka:
        bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
          properties:
            spring.json.add.type.headers: false
            acks: all
            retries: 3
            enable.idempotence: true
        consumer:
          group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:user-service-group}
          auto-offset-reset: earliest
          enable-auto-commit: false
          key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          properties:
            spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
            spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
            spring.json.trusted.packages: "*"
            spring.json.use.type.headers: false
            spring.json.value.default.type: java.lang.Object
    
    # Eureka Configuration - Same as Cart Service
    eureka:
      instance:
        preferIpAddress: true
        instanceId: ${spring.application.name}:${server.port}
        hostname: user-service
        metadataMap:
          instanceId: ${spring.application.name}:${server.port}
      client:
        registryFetchIntervalSeconds: 5
        instanceInfoReplicationIntervalSeconds: 5
        initialInstanceInfoReplicationIntervalSeconds: 5
        eurekaServiceUrlPollIntervalSeconds: 5
        registerWithEureka: true
        fetchRegistry: true
        serviceUrl:
          defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://eureka-server.infrastructure.svc.cluster.local:8761/eureka}
    
    # Management and Monitoring - Same as Cart Service
    management:
      health:
        mongo:
          enabled: true
      endpoint:
        health:
          show-details: "ALWAYS"
          show-components: "ALWAYS"
        metrics:
          enabled: true
      endpoints:
        web:
          exposure:
            include: "*"
          cors:
            allowed-origins: "*"
            allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
      metrics:
        distribution:
          percentiles-histogram:
            http.server.requests: true
          percentiles:
            http.server.requests: 0.5, 0.95, 0.99
        tags:
          application: ${spring.application.name}
    
    # JWT Configuration
    User-service:
      app:
        jwtCookieName: user-service-jwt
        jwtSecret: ${USER_SERVICE_APP_JWT_SECRET:c03a546beee68b92784e681b537540349c386d02b6dbf9917cf438e47e5c1ee93fdebc55652af00cb3ebc6bff17dc3bedaa33ea6cfdd1959b114ede448c4ac87853021cc3c32f1ef6d5951d0c6b1398bc01c563c7638a0000e6b4064c5733c5552aa232aa8547be8b4b1f8dddacac8256f319acd6832ff5ae9365358e20624fc99dab8489d33e582cf621444e9d944442559707a1f92d556862bb53ce12deb3ec17d3a8bc3c7159b672e4f02189af368a8e71d8547a5b71518de7a1d9a4997d20b4f646fae73e73c26666799b21cdec5544b74319756bb0a27d4e124ec5f13bf8f338ce3ba5ad8b3af1a8aae211bef3eb6ca4f8a24e6b80662c94530e168b0dc}
        jwtExpirationMs: ${USER_SERVICE_APP_JWT_EXPIRATION_MS:86400000}
    
    # User Service Specific Configuration
    user:
      session:
        timeout: 1800 # 30 minutes
      cleanup:
        schedule: "0 0 */6 * * *" # Every 6 hours