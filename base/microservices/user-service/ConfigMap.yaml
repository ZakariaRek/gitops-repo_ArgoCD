apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: microservices
  labels:
    app: user-service
    component: microservices
data:
  application.yml: |
    server:
      port: 8081
      servlet:
        context-path: /api/users
    
    spring:
      application:
        name: user-service
      cloud:
        config:
          uri: http://config-server.infrastructure.svc.cluster.local:8888
          enabled: true
          discovery:
            enabled: false
          fail-fast: false
          retry:
            enabled: true
            initial-interval: 3000
            max-attempts: 6
            max-interval: 4000
            multiplier: 1.1
      profiles:
        active: docker,kafka
      
      # MongoDB Configuration
      data:
        mongodb:
          host: ${SPRING_DATA_MONGODB_HOST:user-mongodb-headless.data.svc.cluster.local}
          port: ${SPRING_DATA_MONGODB_PORT:27017}
          database: ${SPRING_DATA_MONGODB_DATABASE:User-service}
          username: ${SPRING_DATA_MONGODB_USERNAME:userservice}
          password: ${SPRING_DATA_MONGODB_PASSWORD:userservice123}
          uri: ${SPRING_DATA_MONGODB_URI:mongodb://userservice:userservice123@user-mongodb-headless.data.svc.cluster.local:27017/User-service}
          authentication-database: ${SPRING_DATA_MONGODB_AUTH_DATABASE:admin}
      
      # Kafka Configuration
      kafka:
        bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
          bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
        consumer:
          group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:user-service-group}
          auto-offset-reset: earliest
          bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
          key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    
    # === EUREKA CONFIGURATION (Same as config-server) ===
    eureka:
      client:
        serviceUrl:
          defaultZone: http://eureka-server.infrastructure.svc.cluster.local:8761/eureka
        register-with-eureka: true
        fetch-registry: true
        registry-fetch-interval-seconds: 30
        initial-instance-info-replication-interval-seconds: 30
      instance:
        prefer-ip-address: true
        hostname: ${HOSTNAME:user-service}
        instance-id: ${spring.application.name}:${HOSTNAME:user-service}:${server.port}
        lease-renewal-interval-in-seconds: 30
        lease-expiration-duration-in-seconds: 90
        status-page-url-path: /api/users/actuator/info
        health-check-url-path: /api/users/actuator/health
        metadata-map:
          management.context-path: /api/users/actuator
    
    # === MANAGEMENT CONFIGURATION (Same pattern as config-server) ===
    management:
      endpoints:
        web:
          exposure:
            include: health,info,refresh,beans,env,metrics
      endpoint:
        health:
          show-details: always
          show-components: always
        env:
          show-values: always
      health:
        mongo:
          enabled: true
        eureka:
          enabled: true
        kafka:
          enabled: true
        config:
          enabled: true
    
    # === LOGGING CONFIGURATION (Same debug levels as config-server) ===
    logging:
      level:
        com.netflix.eureka: DEBUG
        com.netflix.discovery: DEBUG
        org.springframework.cloud.netflix.eureka: DEBUG
        org.springframework.cloud.config: DEBUG
        org.springframework.kafka: INFO
        com.Ecommerce.User_Service: DEBUG
        root: INFO