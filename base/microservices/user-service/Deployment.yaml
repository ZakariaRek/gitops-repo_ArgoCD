apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    component: microservices
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: user-service
          image: yahyazakaria123/ecommerce-app-user-service:latest
          ports:
            - containerPort: 8081
              name: http
          env:
            # === CRITICAL: JAVA_OPTS with System Properties (Same pattern as config-server) ===
            - name: JAVA_OPTS
              value: >-
                -Xmx1536m -Xms512m -XX:MaxMetaspaceSize=256m
                -Dspring.kafka.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Dspring.kafka.producer.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Dspring.kafka.consumer.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Deureka.client.serviceUrl.defaultZone=http://eureka-server.infrastructure.svc.cluster.local:8761/eureka
                -Dspring.cloud.config.uri=http://config-server.infrastructure.svc.cluster.local:8888
                -Dspring.profiles.active=docker,kafka
                -Dlogging.level.com.netflix.eureka=DEBUG
                -Dlogging.level.com.netflix.discovery=DEBUG
                -Dlogging.level.org.springframework.cloud.netflix.eureka=DEBUG

            # Spring Profiles (Same as config-server pattern)
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"

            # Application Configuration
            - name: SPRING_APPLICATION_NAME
              value: "user-service"
            - name: SERVER_PORT
              value: "8081"
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/users"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            # === EUREKA CONFIGURATION (Same as config-server) ===
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS
              value: "30"
            - name: EUREKA_CLIENT_INITIAL_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS
              value: "30"
            - name: EUREKA_INSTANCE_INSTANCE_ID
              value: "${spring.application.name}:${HOSTNAME:user-service}:${server.port}"
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: "30"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: "90"

            # === CONFIG SERVER CONFIGURATION (Same pattern) ===
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"
            - name: SPRING_CLOUD_CONFIG_ENABLED
              value: "true"
            - name: SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED
              value: "false"
            - name: SPRING_CONFIG_LOCATION
              value: "classpath:/,file:/config/"

            # === KAFKA CONFIGURATION ===
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-service-group"

            # === MONGODB CONFIGURATION ===
            - name: SPRING_DATA_MONGODB_HOST
              value: "user-mongodb-headless.data.svc.cluster.local"
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: "User-service"
            - name: SPRING_DATA_MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-username
            - name: SPRING_DATA_MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-password
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: "admin"
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service?authSource=admin"

            # === JWT CONFIGURATION ===
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: jwt-secret
            - name: USER_SERVICE_APP_JWT_EXPIRATION_MS
              value: "86400000"

          volumeMounts:
            - name: config-override
              mountPath: /config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs

          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

          # Health checks (same timeouts as config-server)
          livenessProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
          startupProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 15

      volumes:
        - name: config-override
          configMap:
            name: user-service-config
        - name: logs-volume
          emptyDir: {}

      # === INIT CONTAINERS (Same pattern as config-server) ===
      initContainers:
        # Wait for Eureka (Same as config-server)
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing Eureka connectivity..."
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761; do
                echo "Eureka not ready, waiting..."
                sleep 5
              done
              echo "Eureka is reachable!"
              sleep 15

        # Wait for Config Server
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing Config Server connectivity..."
              until nc -z config-server.infrastructure.svc.cluster.local 8888; do
                echo "Config Server not ready, waiting..."
                sleep 5
              done
              echo "Config Server is reachable!"
              sleep 10

        # Wait for MongoDB
        - name: wait-for-mongodb
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing MongoDB connectivity..."
              until nc -z user-mongodb-headless.data.svc.cluster.local 27017; do
                echo "MongoDB not ready, waiting..."
                sleep 3
              done
              echo "MongoDB is reachable!"

        # Wait for Kafka
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing Kafka connectivity..."
              until nc -z kafka-service.data.svc.cluster.local 9092; do
                echo "Kafka not ready, waiting..."
                sleep 3
              done
              echo "Kafka is reachable!"

      restartPolicy: Always