apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    component: microservices
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: user-service
          image: yahyazakaria123/ecommerce-app-user-service:latest
          ports:
            - containerPort: 8081
              name: http
          env:
            # Simplified JAVA_OPTS - similar to Cart Service
            - name: JAVA_OPTS
              value: "-Xmx1536m -Xms512m -XX:MaxMetaspaceSize=256m"

            # Application Configuration
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"
            - name: SPRING_APPLICATION_NAME
              value: "user-service"
            - name: SERVER_PORT
              value: "8081"
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/users"

            # Eureka Configuration - Keep it simple like Cart Service
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "user-service"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"

            # Config Server Configuration - Enable it like Cart Service
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"

            # MongoDB Configuration
            - name: SPRING_DATA_MONGODB_HOST
              value: "user-mongodb-headless.data.svc.cluster.local"
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: "User-service"
            - name: SPRING_DATA_MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-username
            - name: SPRING_DATA_MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-password
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service?authSource=admin"

            # Kafka Configuration
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-service-group"

            # JWT Configuration
            - name: USER_SERVICE_APP_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: jwt-secret
            - name: USER_SERVICE_APP_JWT_EXPIRATION_MS
              value: "86400000"

          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          # Health Checks - Same as Cart Service timings
          livenessProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 180
            periodSeconds: 45
            timeoutSeconds: 15
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /api/users/actuator/health/readiness
              port: 8081
            initialDelaySeconds: 120
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 8

          startupProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 30

          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: logs-volume
              mountPath: /app/logs

      volumes:
        - name: config-volume
          configMap:
            name: user-service-config
        - name: logs-volume
          emptyDir: {}

      # InitContainers - Same pattern as Cart Service
      initContainers:
        # Wait for MongoDB
        - name: wait-for-mongodb
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for User MongoDB..."
              until nc -z user-mongodb-headless.data.svc.cluster.local 27017; do 
                echo "MongoDB not ready, waiting..."
                sleep 3
              done
              echo "User MongoDB is ready!"

        # Wait for Kafka
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              until nc -z kafka-service.data.svc.cluster.local 9092; do 
                echo "Kafka not ready, waiting..."
                sleep 3
              done
              echo "Kafka is ready!"

        # Wait for Eureka
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Eureka..."
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761; do 
                echo "Eureka not ready, waiting..."
                sleep 3
              done
              echo "Eureka is ready!"

        # Wait for Config Server
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Config Server..."
              until nc -z config-server.infrastructure.svc.cluster.local 8888; do 
                echo "Config Server not ready, waiting..."
                sleep 3
              done
              echo "Config Server is ready!"