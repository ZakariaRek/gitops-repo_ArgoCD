apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    component: microservices
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: user-service
          image: yahyazakaria123/ecommerce-app-user-service:latest
          ports:
            - containerPort: 8081
              name: http
          env:
            # Spring Profiles
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"
            - name: JAVA_OPTS
              value: "-Xmx1536m -Xms512m -XX:MaxMetaspaceSize=256m"

            # CRITICAL: Force Kafka to use the correct cluster address


            # Override any localhost configurations
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"

            # Make sure spring.kafka.bootstrap-servers is set correctly
            - name: SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            # Application Configuration
            - name: SPRING_APPLICATION_NAME
              value: "user-service"
            - name: SERVER_PORT
              value: "8081"
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/users"

            # Service Discovery (Eureka)
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka/"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_INSTANCE_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

            # Config Server
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"

            # MongoDB Configuration (Cross-namespace)
            - name: SPRING_DATA_MONGODB_HOST
              value: "user-mongodb-headless.data.svc.cluster.local"
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: "User-service"
            - name: SPRING_DATA_MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-username
            - name: SPRING_DATA_MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-password
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: "admin"
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service?authSource=admin"

            # Kafka Configuration (Cross-namespace)
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-service-group"

            # JWT Configuration
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: jwt-secret
            - name: USER_SERVICE_APP_JWT_EXPIRATION_MS
              value: "86400000"
            - name: USER_SERVICE_APP_JWT_COOKIE_NAME
              value: "user-service"

            # OAuth2 Configuration
            - name: GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: google-client-id
            - name: GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: google-client-secret
            - name: APP_OAUTH2_AUTHORIZED_REDIRECT_URIS
              value: "http://localhost:3000/auth/oauth2/redirect"

            # ELK Stack Configuration
            - name: LOGSTASH_HOST
              value: "logstash-service.logging.svc.cluster.local"
            - name: LOGSTASH_PORT
              value: "5000"

            # Management and Monitoring
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_ENV_SHOW_VALUES
              value: "ALWAYS"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"

            # Logging Configuration
            - name: LOGGING_LEVEL_COM_ECOMMERCE_USER_SERVICE
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_APACHE_KAFKA
              value: "WARN"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB
              value: "DEBUG"

            # Spring Boot Configuration
            - name: SPRING_ZIPKIN_ENABLED
              value: "false"

          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs

          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

              # Relax health check timings
          livenessProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 180  # Increased from 120
            periodSeconds: 45         # Increased from 30
            timeoutSeconds: 15        # Increased from 10
            failureThreshold: 5       # Increased from 3

          readinessProbe:
            httpGet:
              path: /api/users/actuator/health/readiness
              port: 8081
            initialDelaySeconds: 120  # Increased from 90
            periodSeconds: 15         # Increased from 10
            timeoutSeconds: 10        # Increased from 5
            failureThreshold: 8       # Increased from 5

          startupProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 60   # Increased from 30
            periodSeconds: 15         # Increased from 10
            timeoutSeconds: 10        # Increased from 5
            failureThreshold: 30      # Increased from 20



      volumes:
        - name: config-volume
          configMap:
            name: user-service-config
            items:
              - key: application.yml
                path: application.yml
              - key: bootstrap.yml
                path: bootstrap.yml
              - key: logback-spring.xml
                path: logback-spring.xml
        - name: logs-volume
          emptyDir: {}

      # InitContainers for proper startup order
      initContainers:
        # Wait for MongoDB
        - name: wait-for-mongodb
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for User MongoDB..."
              until nc -z user-mongodb-headless.data.svc.cluster.local 27017; do 
                echo "MongoDB not ready, waiting..."
                sleep 3
              done
              echo "User MongoDB is ready!"

        # Wait for Kafka
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              until nc -z kafka-service.data.svc.cluster.local 9092; do 
                echo "Kafka not ready, waiting..."
                sleep 3
              done
              echo "Kafka is ready!"

        # Wait for Eureka
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Eureka..."
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761; do 
                echo "Eureka not ready, waiting..."
                sleep 3
              done
              echo "Eureka is ready!"

        # Wait for Config Server
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Config Server..."
              until nc -z config-server.infrastructure.svc.cluster.local 8888; do 
                echo "Config Server not ready, waiting..."
                sleep 3
              done
              echo "Config Server is ready!"