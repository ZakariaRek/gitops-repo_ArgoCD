apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    component: microservices
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: user-service
          image: yahyazakaria123/ecommerce-app-user-service:latest
          ports:
            - containerPort: 8081
              name: http
          env:
            # CRITICAL: Force all Kafka connections to use the Kubernetes service
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"

            # JAVA_OPTS with all system properties INCLUDING Kafka overrides
            - name: JAVA_OPTS
              value: >-
                -Xmx1536m -Xms512m -XX:MaxMetaspaceSize=256m
                -Dspring.kafka.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Dspring.kafka.producer.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Dspring.kafka.consumer.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Deureka.client.serviceUrl.defaultZone=http://eureka-server.infrastructure.svc.cluster.local:8761/eureka
                -Dspring.cloud.config.uri=http://config-server.infrastructure.svc.cluster.local:8888
                -Dspring.profiles.active=docker,kafka
                -Dmanagement.endpoints.web.exposure.include=*
                -Deureka.client.enabled=true
                -Deureka.client.register-with-eureka=true
                -Deureka.client.fetch-registry=true

            # Spring Profiles
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"

            # Application Configuration
            - name: SPRING_APPLICATION_NAME
              value: "user-service"
            - name: SERVER_PORT
              value: "8081"
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/users"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            # EUREKA CONFIGURATION - All necessary properties
            - name: EUREKA_CLIENT_ENABLED
              value: "true"
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS
              value: "30"
            - name: EUREKA_CLIENT_INITIAL_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS
              value: "30"
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "user-service"
            - name: EUREKA_INSTANCE_INSTANCE_ID
              value: "${spring.application.name}:${HOSTNAME:user-service}:${server.port}"
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: "30"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: "90"

            # CONFIG SERVER CONFIGURATION
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"
            - name: SPRING_CLOUD_CONFIG_ENABLED
              value: "true"
            - name: SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED
              value: "false"
            - name: SPRING_CLOUD_CONFIG_FAIL_FAST
              value: "false"
            - name: SPRING_CONFIG_LOCATION
              value: "classpath:/,file:/config/"

            # KAFKA CONFIGURATION - Ensure all are set
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-service-group"
            - name: SPRING_KAFKA_PRODUCER_KEY_SERIALIZER
              value: "org.apache.kafka.common.serialization.StringSerializer"
            - name: SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER
              value: "org.springframework.kafka.support.serializer.JsonSerializer"

            # MONGODB CONFIGURATION
            - name: SPRING_DATA_MONGODB_HOST
              value: "user-mongodb-headless.data.svc.cluster.local"
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: "User-service"
            - name: SPRING_DATA_MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-username
            - name: SPRING_DATA_MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-password
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: "admin"
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service?authSource=admin"

            # JWT CONFIGURATION
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: jwt-secret
            - name: USER_SERVICE_APP_JWT_EXPIRATION_MS
              value: "86400000"

          volumeMounts:
            - name: config-override
              mountPath: /config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs

          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          # Health checks with longer timeouts for startup
          livenessProbe:
            httpGet:
              path: /api/users/actuator/health/liveness
              port: 8081
            initialDelaySeconds: 180
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /api/users/actuator/health/readiness
              port: 8081
            initialDelaySeconds: 120
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 5

          startupProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 20

      volumes:
        - name: config-override
          configMap:
            name: user-service-config
        - name: logs-volume
          emptyDir: {}

      # INIT CONTAINERS - Check connectivity before starting
      initContainers:
        # Wait for Eureka
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing Eureka connectivity..."
              max_retries=30
              retry_count=0
              while [ $retry_count -lt $max_retries ]; do
                if nc -z eureka-server.infrastructure.svc.cluster.local 8761; then
                  echo "Eureka is reachable!"
                  exit 0
                fi
                echo "Eureka not ready, waiting... (attempt $retry_count/$max_retries)"
                retry_count=$((retry_count+1))
                sleep 5
              done
              echo "Warning: Eureka still not available after $max_retries attempts, proceeding anyway..."
              exit 0

        # Wait for Config Server
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing Config Server connectivity..."
              max_retries=20
              retry_count=0
              while [ $retry_count -lt $max_retries ]; do
                if nc -z config-server.infrastructure.svc.cluster.local 8888; then
                  echo "Config Server is reachable!"
                  exit 0
                fi
                echo "Config Server not ready, waiting... (attempt $retry_count/$max_retries)"
                retry_count=$((retry_count+1))
                sleep 5
              done
              echo "Warning: Config Server still not available after $max_retries attempts, proceeding anyway..."
              exit 0

        # Wait for MongoDB


        # Wait for Kafka
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Testing Kafka connectivity..."
              max_retries=30
              retry_count=0
              while [ $retry_count -lt $max_retries ]; do
                if nc -z kafka-service.data.svc.cluster.local 9092; then
                  echo "Kafka is reachable!"
                  exit 0
                fi
                echo "Kafka not ready, waiting... (attempt $retry_count/$max_retries)"
                retry_count=$((retry_count+1))
                sleep 5
              done
              echo "ERROR: Kafka is not available after $max_retries attempts!"
              exit 1

      restartPolicy: Always