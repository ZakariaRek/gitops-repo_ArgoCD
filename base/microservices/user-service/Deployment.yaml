apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    component: microservices
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: user-service
          image: yahyazakaria123/ecommerce-app-user-service:latest
          ports:
            - containerPort: 8081
              name: http
          env:
            # OPTIMIZED JVM Options - Better memory management and GC tuning
            - name: JAVA_OPTS
              value: "-Xmx1536m -Xms1024m -XX:MaxMetaspaceSize=256m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:G1HeapRegionSize=16m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp"

            # Application Configuration
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"
            - name: SPRING_APPLICATION_NAME
              value: "user-service"
            - name: SERVER_PORT
              value: "8081"
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/users"

            # OPTIMIZED Logging Configuration
            - name: LOGGING_LEVEL_ROOT
              value: "INFO"
            - name: LOGGING_LEVEL_COM_ECOMMERCE_USER_SERVICE
              value: "INFO"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA
              value: "WARN"
            - name: LOGGING_LEVEL_ORG_APACHE_KAFKA
              value: "ERROR"
            - name: LOGGING_LEVEL_COM_NETFLIX_DISCOVERY
              value: "WARN"
            - name: LOGGING_LEVEL_COM_NETFLIX_EUREKA
              value: "WARN"

            # OPTIMIZED Eureka Configuration with timeouts
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "user-service"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: "30"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: "90"
            - name: EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS
              value: "30"
            - name: EUREKA_CLIENT_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS
              value: "30"
            - name: EUREKA_CLIENT_EUREKA_SERVER_CONNECT_TIMEOUT_SECONDS
              value: "30"
            - name: EUREKA_CLIENT_EUREKA_SERVER_READ_TIMEOUT_SECONDS
              value: "30"

            # Config Server Configuration
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"

            # MongoDB Configuration with timeouts
            - name: SPRING_DATA_MONGODB_HOST
              value: "user-mongodb-headless.data.svc.cluster.local"
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: "User-service"
            - name: SPRING_DATA_MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-username
            - name: SPRING_DATA_MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-password
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service?authSource=admin&connectTimeoutMS=30000&socketTimeoutMS=30000&serverSelectionTimeoutMS=30000"

            # OPTIMIZED Kafka Configuration with connection limits
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-service-group"
            - name: SPRING_KAFKA_PROPERTIES_CONNECTIONS_MAX_IDLE_MS
              value: "300000"
            - name: SPRING_KAFKA_PROPERTIES_REQUEST_TIMEOUT_MS
              value: "30000"
            - name: SPRING_KAFKA_PROPERTIES_SESSION_TIMEOUT_MS
              value: "30000"
            - name: SPRING_KAFKA_CONSUMER_ENABLE_AUTO_COMMIT
              value: "true"
            - name: SPRING_KAFKA_CONSUMER_AUTO_COMMIT_INTERVAL
              value: "5000"
            - name: SPRING_KAFKA_CONSUMER_MAX_POLL_RECORDS
              value: "10"
            - name: SPRING_KAFKA_LISTENER_CONCURRENCY
              value: "1"

            # JWT Configuration
            - name: USER_SERVICE_APP_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: jwt-secret
            - name: USER_SERVICE_APP_JWT_EXPIRATION_MS
              value: "86400000"

            # Task Executor Configuration
            - name: TASK_EXECUTION_POOL_CORE_SIZE
              value: "5"
            - name: TASK_EXECUTION_POOL_MAX_SIZE
              value: "10"
            - name: TASK_SCHEDULING_POOL_SIZE
              value: "2"

            # Disable Zipkin for now
            - name: SPRING_ZIPKIN_ENABLED
              value: "false"

          resources:
            requests:
              memory: "1.5Gi"    # Increased for better stability
              cpu: "500m"
            limits:
              memory: "2.5Gi"    # Increased for better stability
              cpu: "1500m"       # Increased to handle concurrent operations

          # OPTIMIZED Health Checks - Longer timeouts to prevent premature kills
          livenessProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 300    # Increased to allow full startup
            periodSeconds: 60           # Reduced frequency
            timeoutSeconds: 20          # Increased timeout
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /api/users/actuator/health/readiness
              port: 8081
            initialDelaySeconds: 180    # Increased for better startup
            periodSeconds: 30           # Reduced frequency
            timeoutSeconds: 15          # Increased timeout
            failureThreshold: 10        # More tolerant

          startupProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 120    # Increased for dependencies
            periodSeconds: 20           # Reduced frequency
            timeoutSeconds: 15          # Increased timeout
            failureThreshold: 40        # Much more tolerant

          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: tmp-volume
              mountPath: /tmp

      volumes:
        - name: config-volume
          configMap:
            name: user-service-config
        - name: tmp-volume
          emptyDir: {}

      # OPTIMIZED InitContainers with better wait logic
      initContainers:
        # Wait for MongoDB with timeout
        - name: wait-for-mongodb
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for User MongoDB..."
              timeout=300
              count=0
              until nc -z user-mongodb-headless.data.svc.cluster.local 27017 || [ $count -eq $timeout ]; do 
                echo "MongoDB not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "MongoDB wait timeout reached!"
                exit 1
              fi
              echo "User MongoDB is ready!"

        # Wait for Kafka with timeout
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              timeout=300
              count=0
              until nc -z kafka-service.data.svc.cluster.local 9092 || [ $count -eq $timeout ]; do 
                echo "Kafka not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "Kafka wait timeout reached!"
                exit 1
              fi
              echo "Kafka is ready!"

        # Wait for Eureka with timeout
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Eureka..."
              timeout=300
              count=0
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761 || [ $count -eq $timeout ]; do 
                echo "Eureka not ready, waiting... ($count/$timeout)"
                sleep 5
                count=$((count+5))
              done
              if [ $count -eq $timeout ]; then
                echo "Eureka wait timeout reached!"
                exit 1
              fi
              echo "Eureka is ready!"

        # Wait for Config Server with timeout
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Config Server..."
              timeout=300
              count=0
              until nc -z config-server.infrastructure.svc.cluster.local 8888 || [ $count -eq $timeout ]; do 
                echo "Config Server not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "Config Server wait timeout reached!"
                exit 1
              fi
              echo "Config Server is ready!"