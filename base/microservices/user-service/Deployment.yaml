apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices
  labels:
    app: user-service
    component: microservices
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: user-service
          image: yahyazakaria123/ecommerce-app-user-service:latest
          ports:
            - containerPort: 8081
              name: http
          env:
            # === CRITICAL FIX: JAVA_OPTS with System Properties (Highest Precedence) ===
            - name: JAVA_OPTS
              value: >-
                -Xmx1536m -Xms512m -XX:MaxMetaspaceSize=256m
                -Dspring.kafka.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Dspring.kafka.producer.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Dspring.kafka.consumer.bootstrap-servers=kafka-service.data.svc.cluster.local:9092
                -Deureka.client.serviceUrl.defaultZone=http://eureka-server.infrastructure.svc.cluster.local:8761/eureka/
                -Dspring.cloud.config.uri=http://config-server.infrastructure.svc.cluster.local:8888
                -Dspring.profiles.active=docker,kafka
                -Dlogging.level.org.springframework.kafka=DEBUG
                -Dlogging.level.com.Ecommerce.User_Service=DEBUG

            # Spring Profiles
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"

            # Application Configuration
            - name: SPRING_APPLICATION_NAME
              value: "user-service"
            - name: SERVER_PORT
              value: "8081"
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/users"

            # Service Discovery (Eureka) - Enhanced Configuration
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka/"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_INSTANCE_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTRY_FETCH_INTERVAL_SECONDS
              value: "5"
            - name: EUREKA_CLIENT_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS
              value: "5"
            - name: EUREKA_CLIENT_INITIAL_INSTANCE_INFO_REPLICATION_INTERVAL_SECONDS
              value: "5"
            - name: EUREKA_INSTANCE_INSTANCE_ID
              value: "${spring.application.name}:${server.port}"
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: "30"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: "90"

            # Config Server - Enhanced Configuration
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"
            - name: SPRING_CLOUD_CONFIG_ENABLED
              value: "true"
            - name: SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED
              value: "false"
            - name: SPRING_CLOUD_CONFIG_DISCOVERY_SERVICE_ID
              value: "config-server"
            - name: SPRING_CONFIG_IMPORT
              value: "optional:configserver:http://config-server.infrastructure.svc.cluster.local:8888"
            - name: SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL
              value: "3000"
            - name: SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS
              value: "6"
            - name: SPRING_CLOUD_CONFIG_RETRY_MAX_INTERVAL
              value: "4000"
            - name: SPRING_CLOUD_CONFIG_RETRY_MULTIPLIER
              value: "1.1"

            # CRITICAL: Kafka Configuration (Multiple Formats for Maximum Coverage)
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_BOOTSTRAP-SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "user-service-group"

            # MongoDB Configuration (Cross-namespace)
            - name: SPRING_DATA_MONGODB_HOST
              value: "user-mongodb-headless.data.svc.cluster.local"
            - name: SPRING_DATA_MONGODB_PORT
              value: "27017"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: "User-service"
            - name: SPRING_DATA_MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-username
            - name: SPRING_DATA_MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: mongodb-password
            - name: SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE
              value: "admin"
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service?authSource=admin"

            # JWT Configuration
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: jwt-secret
            - name: USER_SERVICE_APP_JWT_EXPIRATION_MS
              value: "86400000"
            - name: USER_SERVICE_APP_JWT_COOKIE_NAME
              value: "user-service"

            # OAuth2 Configuration
            - name: GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: google-client-id
                  optional: true
            - name: GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: user-service-secrets
                  key: google-client-secret
                  optional: true
            - name: APP_OAUTH2_AUTHORIZED_REDIRECT_URIS
              value: "http://localhost:3000/auth/oauth2/redirect"

            # ELK Stack Configuration
            - name: LOGSTASH_HOST
              value: "logstash-service.logging.svc.cluster.local"
            - name: LOGSTASH_PORT
              value: "5000"

            # Management and Monitoring
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_ENV_SHOW_VALUES
              value: "ALWAYS"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"

            # Logging Configuration
            - name: LOGGING_LEVEL_COM_ECOMMERCE_USER_SERVICE
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_APACHE_KAFKA
              value: "WARN"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB
              value: "DEBUG"
            - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG
              value: "DEBUG"
            - name: LOGGING_LEVEL_COM_NETFLIX_EUREKA
              value: "DEBUG"
            - name: LOGGING_LEVEL_COM_NETFLIX_DISCOVERY
              value: "DEBUG"

            # Spring Boot Configuration
            - name: SPRING_ZIPKIN_ENABLED
              value: "false"

            # Force Configuration Loading Order
            - name: SPRING_CONFIG_LOCATION
              value: "classpath:/application.yaml"
            - name: SPRING_PROFILES_INCLUDE
              value: "kubernetes"

          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs

          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          # Enhanced health checks with proper linking validation
          livenessProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 180
            periodSeconds: 45
            timeoutSeconds: 15
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /api/users/actuator/health/readiness
              port: 8081
            initialDelaySeconds: 120
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 8

          startupProbe:
            httpGet:
              path: /api/users/actuator/health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 30

      volumes:
        - name: config-volume
          configMap:
            name: user-service-config
            items:
              - key: application.yml
                path: application.yml
        - name: logs-volume
          emptyDir: {}

      # Enhanced InitContainers for proper startup order and service linking
      initContainers:
        # Wait for Config Server (First Priority)
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Config Server..."
              timeout=300
              elapsed=0
              until nc -z config-server.infrastructure.svc.cluster.local 8888 || [ $elapsed -gt $timeout ]; do 
                echo "Config Server not ready, waiting... ($elapsed/$timeout)"
                sleep 5
                elapsed=$((elapsed + 5))
              done
              if [ $elapsed -gt $timeout ]; then
                echo "ERROR: Config Server not available after $timeout seconds"
                exit 1
              fi
              echo "Config Server is ready!"
              
              # Test config server endpoint
              echo "Testing Config Server endpoint..."
              wget -q --spider --timeout=10 --tries=3 "http://config-server.infrastructure.svc.cluster.local:8888/actuator/health" || echo "Config Server health check failed, but proceeding..."
              echo "Config Server validation completed!"

        # Wait for Eureka (Second Priority)
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Eureka Server..."
              timeout=300
              elapsed=0
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761 || [ $elapsed -gt $timeout ]; do 
                echo "Eureka Server not ready, waiting... ($elapsed/$timeout)"
                sleep 5
                elapsed=$((elapsed + 5))
              done
              if [ $elapsed -gt $timeout ]; then
                echo "ERROR: Eureka Server not available after $timeout seconds"
                exit 1
              fi
              echo "Eureka Server is ready!"
              
              # Test Eureka endpoint
              echo "Testing Eureka Server endpoint..."
              wget -q --spider --timeout=10 --tries=3 "http://eureka-server.infrastructure.svc.cluster.local:8761/actuator/health" || echo "Eureka health check failed, but proceeding..."
              echo "Eureka Server validation completed!"

        # Wait for MongoDB
        - name: wait-for-mongodb
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for User MongoDB..."
              timeout=180
              elapsed=0
              until nc -z user-mongodb-headless.data.svc.cluster.local 27017 || [ $elapsed -gt $timeout ]; do 
                echo "MongoDB not ready, waiting... ($elapsed/$timeout)"
                sleep 3
                elapsed=$((elapsed + 3))
              done
              if [ $elapsed -gt $timeout ]; then
                echo "WARNING: MongoDB not available after $timeout seconds, proceeding anyway..."
              else
                echo "User MongoDB is ready!"
              fi

        # Wait for Kafka
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              timeout=180
              elapsed=0
              until nc -z kafka-service.data.svc.cluster.local 9092 || [ $elapsed -gt $timeout ]; do 
                echo "Kafka not ready, waiting... ($elapsed/$timeout)"
                sleep 3
                elapsed=$((elapsed + 3))
              done
              if [ $elapsed -gt $timeout ]; then
                echo "WARNING: Kafka not available after $timeout seconds, proceeding anyway..."
              else
                echo "Kafka is ready!"
              fi

      restartPolicy: Always