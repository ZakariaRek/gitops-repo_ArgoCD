apiVersion: v1
kind: ConfigMap
metadata:
  name: cart-service-config
  namespace: microservices
  labels:
    app: cart-service
    component: microservices
data:
  application.yml: |
    server:
      port: 8082
      servlet:
        context-path: /api/carts
      error:
        include-stacktrace: always
        include-message: always
        include-binding-errors: always
    
    debug: true
    
    spring:
      profiles:
        active: docker,kafka
      config:
        import: optional:configserver:${SPRING_CLOUD_CONFIG_URI:http://config-server.infrastructure.svc.cluster.local:8888}
      application:
        name: cart-service
      
      # MongoDB Configuration
      data:
        mongodb:
          host: ${SPRING_DATA_MONGODB_HOST:cart-mongodb-headless.data.svc.cluster.local}
          port: ${SPRING_DATA_MONGODB_PORT:27017}
          database: ${SPRING_DATA_MONGODB_DATABASE:cartdb}
          username: ${SPRING_DATA_MONGODB_USERNAME:cartservice}
          password: ${SPRING_DATA_MONGODB_PASSWORD:cartservice123}
          uri: ${SPRING_DATA_MONGODB_URI:mongodb://cartservice:cartservice123@cart-mongodb-headless.data.svc.cluster.local:27017/cartdb}
        
        # Redis Configuration
        redis:
          host: ${SPRING_DATA_REDIS_HOST:redis-service.data.svc.cluster.local}
          port: ${SPRING_DATA_REDIS_PORT:6379}
          database: ${SPRING_DATA_REDIS_DATABASE:3}
          timeout: ${SPRING_DATA_REDIS_TIMEOUT:2000ms}
          lettuce:
            pool:
              max-active: 8
              max-idle: 8
              min-idle: 0
              max-wait: -1ms
        
        # Cache Configuration
        cache:
          type: redis
          redis:
            time-to-live: 600000
            cache-null-values: false
      
      # Kafka Configuration
      kafka:
        bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
          properties:
            spring.json.add.type.headers: false
            acks: all
            retries: 3
            enable.idempotence: true
        consumer:
          group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:cart-service-group}
          auto-offset-reset: earliest
          enable-auto-commit: false
          key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          properties:
            spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
            spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
            spring.json.trusted.packages: "*"
            spring.json.use.type.headers: false
            spring.json.value.default.type: java.lang.Object
    
    # Eureka Configuration
    eureka:
      instance:
        preferIpAddress: true
        instanceId: ${spring.application.name}:${server.port}
        hostname: cart-service
        metadataMap:
          instanceId: ${spring.application.name}:${server.port}
      client:
        registryFetchIntervalSeconds: 5
        instanceInfoReplicationIntervalSeconds: 5
        initialInstanceInfoReplicationIntervalSeconds: 5
        eurekaServiceUrlPollIntervalSeconds: 5
        registerWithEureka: true
        fetchRegistry: true
        serviceUrl:
          defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://eureka-server.infrastructure.svc.cluster.local:8761/eureka}
    
    # Management and Monitoring
    management:
      health:
        mongo:
          enabled: true
        redis:
          enabled: true
      endpoint:
        health:
          show-details: "ALWAYS"
          show-components: "ALWAYS"
        metrics:
          enabled: true
      endpoints:
        web:
          exposure:
            include: "*"
          cors:
            allowed-origins: "*"
            allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
      metrics:
        distribution:
          percentiles-histogram:
            http.server.requests: true
          percentiles:
            http.server.requests: 0.5, 0.95, 0.99
        tags:
          application: ${spring.application.name}
    
    # Redis configuration
    redis:
      maximumActiveConnectionCount: 128
    
    # Cart Service Specific Configuration
    cart:
      session:
        timeout: 1800 # 30 minutes
      cache:
        ttl: 600 # 10 minutes
      cleanup:
        schedule: "0 0 */6 * * *" # Every 6 hours
