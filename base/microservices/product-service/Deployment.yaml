apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: microservices
  labels:
    app: product-service
    component: microservices
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
        component: microservices
        tier: backend
    spec:
      containers:
        - name: product-service
          image: yahyazakaria123/ecommerce-app-product-service:latest
          ports:
            - containerPort: 8082  # Updated to match ConfigMap
              name: http
          env:
            - name: JAVA_OPTS
              value: "-Xmx1536m -Xms512m -XX:MaxMetaspaceSize=256m"

            # Application Configuration
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"
            - name: SPRING_APPLICATION_NAME
              value: "product-service"
            - name: SERVER_PORT
              value: "8082"  # Updated to match ConfigMap
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api/products"

            # Eureka Configuration
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "product-service"

            # Config Server Configuration
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"

            # PostgreSQL Configuration - FIXED service name
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://product-postgres-service.data.svc.cluster.local:5432/productdb"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: product-service-secrets
                  key: db-username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: product-service-secrets
                  key: db-password

            # Kafka Configuration
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
            - name: SPRING_KAFKA_CONSUMER_GROUP_ID
              value: "product-service-group"

            # Logging Configuration
            - name: LOGSTASH_HOST
              value: "localhost"
            - name: LOGSTASH_PORT
              value: "5000"

          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          # OPTIMIZED Health Checks - Longer timeouts to prevent premature kills
          livenessProbe:
            httpGet:
              path: /api/products/actuator/health
              port: 8082  # Updated port
            initialDelaySeconds: 300    # Increased to allow full startup
            periodSeconds: 60           # Reduced frequency
            timeoutSeconds: 20          # Increased timeout
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /api/products/actuator/health/readiness
              port: 8082  # Updated port
            initialDelaySeconds: 180    # Increased for better startup
            periodSeconds: 30           # Reduced frequency
            timeoutSeconds: 15          # Increased timeout
            failureThreshold: 10        # More tolerant

          startupProbe:
            httpGet:
              path: /api/products/actuator/health
              port: 8082  # Updated port
            initialDelaySeconds: 120    # Increased for dependencies
            periodSeconds: 20           # Reduced frequency
            timeoutSeconds: 15          # Increased timeout
            failureThreshold: 40        # Much more tolerant

          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: logs-volume
              mountPath: /app/logs
            - name: uploads-volume
              mountPath: /app/uploads
            - name: tmp-volume
              mountPath: /tmp

      volumes:
        - name: config-volume
          configMap:
            name: product-service-config
        - name: logs-volume
          emptyDir: {}
        - name: uploads-volume
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}

      # OPTIMIZED InitContainers with better wait logic
      initContainers:
        # Wait for PostgreSQL with timeout
        - name: wait-for-postgres
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for PostgreSQL (product-postgres-service)..."
              timeout=300
              count=0
              until nc -z product-postgres-service.data.svc.cluster.local 5432 || [ $count -eq $timeout ]; do 
                echo "PostgreSQL not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "PostgreSQL wait timeout reached!"
                exit 1
              fi
              echo "PostgreSQL is ready!"

        # Wait for Kafka with timeout
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              timeout=300
              count=0
              until nc -z kafka-service.data.svc.cluster.local 9092 || [ $count -eq $timeout ]; do 
                echo "Kafka not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "Kafka wait timeout reached!"
                exit 1
              fi
              echo "Kafka is ready!"

        # Wait for Eureka with timeout
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Eureka..."
              timeout=300
              count=0
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761 || [ $count -eq $timeout ]; do 
                echo "Eureka not ready, waiting... ($count/$timeout)"
                sleep 5
                count=$((count+5))
              done
              if [ $count -eq $timeout ]; then
                echo "Eureka wait timeout reached!"
                exit 1
              fi
              echo "Eureka is ready!"

        # Wait for Config Server with timeout
        - name: wait-for-config-server
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Config Server..."
              timeout=300
              count=0
              until nc -z config-server.infrastructure.svc.cluster.local 8888 || [ $count -eq $timeout ]; do 
                echo "Config Server not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "Config Server wait timeout reached!"
                exit 1
              fi
              echo "Config Server is ready!"