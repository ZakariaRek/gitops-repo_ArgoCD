apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping-service
  namespace: microservices
  labels:
    app: shipping-service
    component: microservices
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shipping-service
  template:
    metadata:
      labels:
        app: shipping-service
        component: microservices
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: shipping-service
          image: yahyazakaria123/ecommerce-app-shipping-service:latest
          ports:
            - containerPort: 8085
              name: http
              protocol: TCP

          # Load all non-sensitive environment variables from ConfigMap
          envFrom:
            - configMapRef:
                name: shipping-service-config

          # Explicit environment variables to override defaults
          env:
            # Database configuration - EXPLICIT override
            - name: DB_HOST
              value: "shipping-postgres-service.data.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "shippingdb"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: shipping-service-secrets
                  key: db-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: shipping-service-secrets
                  key: db-password

            # Kafka configuration - EXPLICIT override
            - name: KAFKA_BROKERS
              value: "kafka-service.data.svc.cluster.local:9092"

            # Server configuration - EXPLICIT override
            - name: SERVER_PORT
              value: "8085"

            # Eureka configuration - EXPLICIT override
            - name: EUREKA_URL
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"

            # DISABLE Config Server - EXPLICIT override
            - name: CONFIG_SERVER_URL
              value: ""

            # Set IP address for Eureka registration
            - name: SERVICE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

            # Debug: Print environment variables at startup
            - name: DEBUG_ENV
              value: "true"

          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

          # Health checks for Go application
          livenessProbe:
            httpGet:
              path: /health
              port: 8085
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: 8085
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /health
              port: 8085
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12

          # Volume mounts
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp

      # Volumes
      volumes:
        - name: tmp-volume
          emptyDir: {}

      # Init containers to wait for dependencies (Config Server removed since disabled)
      initContainers:
        # Wait for PostgreSQL
        - name: wait-for-postgres
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for PostgreSQL..."
              timeout=300
              count=0
              until nc -z shipping-postgres-service.data.svc.cluster.local 5432 || [ $count -eq $timeout ]; do 
                echo "PostgreSQL not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "PostgreSQL wait timeout reached!"
                exit 1
              fi
              echo "PostgreSQL is ready!"

        # Wait for Kafka
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka..."
              timeout=300
              count=0
              until nc -z kafka-service.data.svc.cluster.local 9092 || [ $count -eq $timeout ]; do 
                echo "Kafka not ready, waiting... ($count/$timeout)"
                sleep 3
                count=$((count+3))
              done
              if [ $count -eq $timeout ]; then
                echo "Kafka wait timeout reached!"
                exit 1
              fi
              echo "Kafka is ready!"

        # Wait for Eureka
        - name: wait-for-eureka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Eureka..."
              timeout=300
              count=0
              until nc -z eureka-server.infrastructure.svc.cluster.local 8761 || [ $count -eq $timeout ]; do 
                echo "Eureka not ready, waiting... ($count/$timeout)"
                sleep 5
                count=$((count+5))
              done
              if [ $count -eq $timeout ]; then
                echo "Eureka wait timeout reached!"
                exit 1
              fi
              echo "Eureka is ready!"