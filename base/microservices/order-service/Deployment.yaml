apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: microservices
  labels:
    app: order-service
    component: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        component: microservices
    spec:
      nodeSelector:
        node-role: microservices
      containers:
        - name: order-service
          image: yahyazakaria123/ecommerce-app-order-service:latest
          ports:
            - containerPort: 8082
              name: http
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker,kafka"
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: "http://eureka-server.infrastructure.svc.cluster.local:8761/eureka"
            - name: SPRING_CLOUD_CONFIG_URI
              value: "http://config-server.infrastructure.svc.cluster.local:8888"
            - name: SPRING_APPLICATION_NAME
              value: "order-service"
            - name: SERVER_PORT
              value: "8082"
            # Database configuration
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres-service.data.svc.cluster.local:5432/orderdb"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: order-service-secrets
                  key: db-username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: order-service-secrets
                  key: db-password
            # Redis configuration for caching
            - name: SPRING_DATA_REDIS_HOST
              value: "redis-service.data.svc.cluster.local"
            - name: SPRING_DATA_REDIS_PORT
              value: "6379"
            - name: SPRING_DATA_REDIS_DATABASE
              value: "3"
            # Kafka configuration
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service.data.svc.cluster.local:9092"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 90
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8082
            initialDelaySeconds: 60
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 18