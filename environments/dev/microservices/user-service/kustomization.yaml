apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

metadata:
  name: user-service-dev
  namespace: microservices

# Reference the base user-service configuration
resources:
  - ../../../../base/microservices/user-service
  - user-service-ingress.yaml

# Use microservices namespace
namespace: microservices

# Add environment-specific labels
labels:
  - pairs:
      environment: dev
      tier: development

# Use development image tag
images:
  - name: yahyazakaria123/ecommerce-app-user-service
    newTag: latest

# Reduce replicas for dev (save resources)
replicas:
  - name: user-service
    count: 1

# Generate additional ConfigMap with dev-specific settings
configMapGenerator:
  - name: user-service-dev-config
    literals:
      - LOG_LEVEL=DEBUG
      - SPRING_PROFILES_ACTIVE=dev,docker,kafka
      - ENABLE_REQUEST_LOGGING=true
      - MONGODB_DATABASE=User-service-dev
      - EUREKA_INSTANCE_HOSTNAME=localhost
      - JWT_EXPIRATION_MS=86400000

# Use patchesStrategicMerge instead of patches for better compatibility
patchesStrategicMerge:
  # Patch deployment for dev-specific configurations
  - |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: user-service
      namespace: microservices
    spec:
      template:
        spec:
          containers:
            - name: user-service
              # Dev-specific resource limits (reduced for development)
              resources:
                requests:
                  memory: "512Mi"
                  cpu: "200m"
                limits:
                  memory: "1Gi"
                  cpu: "500m"
              env:
                # Override specific environment variables for dev
                - name: SPRING_PROFILES_ACTIVE
                  value: "dev,docker,kafka"
                - name: SPRING_DATA_MONGODB_DATABASE
                  value: "User-service-dev"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: "user-service"
                - name: LOGGING_LEVEL_ROOT
                  value: "DEBUG"
                - name: LOG_LEVEL
                  value: "DEBUG"
                - name: ENABLE_REQUEST_LOGGING
                  value: "true"
                - name: MANAGEMENT_ENDPOINT_LOGGERS_ENABLED
                  value: "true"
                - name: SPRING_JPA_SHOW_SQL
                  value: "true"
                - name: SPRING_DATA_MONGODB_URI
                  value: "mongodb://$(SPRING_DATA_MONGODB_USERNAME):$(SPRING_DATA_MONGODB_PASSWORD)@user-mongodb-headless.data.svc.cluster.local:27017/User-service-dev?authSource=admin"

  # Patch service to use NodePort for easy access in dev
  - |-
    apiVersion: v1
    kind: Service
    metadata:
      name: user-service
      namespace: microservices
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: nlb
    spec:
      type: NodePort
      ports:
        - name: http
          port: 8081
          targetPort: 8081
          nodePort: 30081
          protocol: TCP

  # Patch secrets for dev environment
  - |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: user-service-secrets
      namespace: microservices
    type: Opaque
    data:
      # Dev-specific MongoDB credentials (base64 encoded)
      mongodb-username: dXNlcnNlcnZpY2VfZGV2  # userservice_dev
      mongodb-password: dXNlcnNlcnZpY2VfZGV2XzEyMw==  # userservice_dev_123
      # Simplified JWT secret for dev (base64 encoded)
      jwt-secret: ZGV2LWp3dC1zZWNyZXQtZm9yLXRlc3Rpbmctb25seQ==  # dev-jwt-secret-for-testing-only
      # Placeholder OAuth2 credentials for dev (base64 encoded)
      google-client-id: eW91ci1nb29nbGUtY2xpZW50LWlkLWhlcmU=  # your-google-client-id-here
      google-client-secret: eW91ci1nb29nbGUtY2xpZW50LXNlY3JldC1oZXJl  # your-google-client-secret-here

  # Patch ConfigMap for dev-specific application configuration
  - |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: user-service-config
      namespace: microservices
    data:
      application.yml: |
        server:
          port: 8081
          servlet:
            context-path: /api/users
          error:
            include-stacktrace: always
            include-message: always
            include-binding-errors: always
        
        debug: true
        
        spring:
          profiles:
            active: dev,docker,kafka
          config:
            import: optional:configserver:${SPRING_CLOUD_CONFIG_URI:http://config-server.infrastructure.svc.cluster.local:8888}
            retry:
              initial-interval: 3000
              max-attempts: 6
              max-interval: 4000
              multiplier: 1.1
            fail-fast: false
          cloud:
            config:
              uri: ${SPRING_CLOUD_CONFIG_URI:http://config-server.infrastructure.svc.cluster.local:8888}
              enabled: true
              discovery:
                enabled: false
              retry:
                enabled: true
                initial-interval: 3000
                max-attempts: 6
                max-interval: 4000
                multiplier: 1.1
              fail-fast: false
          application:
            name: user-service
        
          # Dev MongoDB Configuration
          data:
            mongodb:
              host: ${SPRING_DATA_MONGODB_HOST:user-mongodb-headless.data.svc.cluster.local}
              port: ${SPRING_DATA_MONGODB_PORT:27017}
              database: ${SPRING_DATA_MONGODB_DATABASE:User-service-dev}
              username: ${SPRING_DATA_MONGODB_USERNAME:userservice_dev}
              password: ${SPRING_DATA_MONGODB_PASSWORD:userservice_dev_123}
              uri: ${SPRING_DATA_MONGODB_URI:mongodb://userservice_dev:userservice_dev_123@user-mongodb-headless.data.svc.cluster.local:27017/User-service-dev}
              authentication-database: ${SPRING_DATA_MONGODB_AUTH_DATABASE:admin}
        
            # Redis Configuration
            redis:
              host: ${SPRING_DATA_REDIS_HOST:redis-service.data.svc.cluster.local}
              port: ${SPRING_DATA_REDIS_PORT:6379}
              database: ${SPRING_DATA_REDIS_DATABASE:2}  # Use different DB for dev
              timeout: ${SPRING_DATA_REDIS_TIMEOUT:2000ms}
        
          # Kafka Configuration
          kafka:
            bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka-service.data.svc.cluster.local:9092}
            producer:
              key-serializer: org.apache.kafka.common.serialization.StringSerializer
              value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
              properties:
                spring.json.add.type.headers: false
                acks: all
                retries: 3
            consumer:
              group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:user-service-dev-group}
              auto-offset-reset: earliest
              enable-auto-commit: false
        
        # Dev Eureka Configuration
        eureka:
          instance:
            preferIpAddress: true
            instanceId: ${spring.application.name}:dev:${server.port}
            hostname: user-service
            metadataMap:
              instanceId: ${spring.application.name}:dev:${server.port}
              zone: dev
              environment: development
          client:
            registerWithEureka: true
            fetchRegistry: true
            serviceUrl:
              defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://eureka-server.infrastructure.svc.cluster.local:8761/eureka}
        
        # Enhanced Management for Dev
        management:
          endpoints:
            web:
              exposure:
                include: "*"
          endpoint:
            health:
              show-details: "ALWAYS"
            loggers:
              enabled: true
            env:
              show-values: "ALWAYS"
          metrics:
            tags:
              environment: dev
        
        # Dev-specific User Service Configuration
        user:
          session:
            timeout: 7200 # 2 hours for dev
          cache:
            ttl: 3600 # 1 hour for dev
          security:
            jwt:
              secret: ${JWT_SECRET:dev-jwt-secret-for-testing-only}
              expiration: 86400 # 24 hours
        
        # Enhanced Logging for Development
        logging:
          level:
            org.springframework.kafka: DEBUG
            org.apache.kafka: INFO
            com.Ecommerce.User_Service: DEBUG
            org.springframework.data.mongodb: DEBUG
            org.springframework.cloud.config: DEBUG
            org.springframework.cloud.netflix.eureka: DEBUG
            com.netflix.eureka: DEBUG
            com.netflix.discovery: DEBUG
            org.springframework.web: DEBUG
            org.springframework.security: DEBUG
            org.springframework.boot.actuate: DEBUG
            root: DEBUG
          pattern:
            console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{50} - %msg%n"
          file:
            name: /app/logs/user-service-dev.log
        
        # Dev Info
        info:
          app:
            name: ${spring.application.name}
            description: User Service for E-commerce Application (Development)
            version: dev-latest
            environment: development